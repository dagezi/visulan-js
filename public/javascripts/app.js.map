{"version":3,"file":"public/javascripts/app.js","sources":["app/application.coffee","app/initialize.coffee","app/lib/assert.coffee","app/lib/color.coffee","app/lib/pair-parser.coffee","app/lib/router.coffee","app/lib/target-parser.coffee","app/lib/view_helper.coffee","app/models/collection.coffee","app/models/match-result.coffee","app/models/model.coffee","app/models/pair.coffee","app/models/pattern.coffee","app/models/region.coffee","app/models/world.coffee","app/views/home-view.coffee","app/views/pallet-view.coffee","app/views/templates/home.hbs","app/views/view.coffee","app/views/world-view.coffee"],"names":[],"mappings":"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","sourcesContent":["# The application bootstrapper.\nmodule.exports = class Application\n  initialize: ->\n    HomeView = require 'views/home-view'\n    Router = require 'lib/router'\n    World = require 'models/world'\n    PairParser = require 'lib/pair-parser'\n    TargetParser = require 'lib/target-parser'\n\n    # Ideally, initialized classes should be kept in controllers & mediator.\n    # If you're making big webapp, here's more sophisticated skeleton\n    # https://github.com/paulmillr/brunch-with-chaplin\n    @world = new World height: 50, width: 100\n    @wholeRegion = @world.getWholeRegion()\n\n    @homeView = new HomeView world: @world\n    @homeView.on 'play', @startPlay\n    @homeView.on 'pause', @pause\n \n    @pairParser = new PairParser()\n    @targetParser = new TargetParser()\n\n    # Instantiate the router\n    @router = new Router()\n\n  startPlay: =>\n    @target = @targetParser.match @wholeRegion\n    @pairs = @pairParser.match @wholeRegion\n\n    console.log @target\n    console.log @pairs\n\n    @play() if @target and @pairs\n\n  play: =>\n    @intervalId = setInterval @progress, 500\n    @homeView.trigger 'playingState', true\n\n  pause: =>\n    clearInterval @intervalId\n    @homeView.trigger 'playingState', false\n\n  progress: =>\n    matches = []\n    matchedRegions = []\n    for pair in @pairs\n      matches = matches.concat(pair.match(@target, matchedRegions))\n      matchedRegions.push(match.dest) for match in matches\n\n    match.execute() for match in matches\n    @homeView.worldView.draw()\n","Application = require 'application'\n\n$ ->\n  window.application = (new Application())\n  application.initialize()\n  Backbone.history.start()\n","module.exports = (expression, message)->\n  throw message or \"Assertion failed\" unless expression\n","module.exports = Color =\n  symbols: '_abcdefghijklmnopqrstuvwxyz'\n\n  toColor: (sym)=>\n    levels = [0, 160, 255]\n    ix = Color.symbols.indexOf(sym)\n    ix = 0 if sym < 0\n    r = levels[(Math.floor(ix / 9))]\n    g = levels[(Math.floor(ix / 3) % 3)]\n    b = levels[ix % 3]\n    \"rgb(#{r},#{g},#{b})\"\n","Region = require 'models/region'\nPattern = require 'models/pattern'\nPair = require 'models/pair'\n\nmodule.exports = class PairParser\n\n  headerRegexp = /_c{5,}_/g\n  bodyRegexp = /^_c.+c.+c_$/\n  tailRegexp = /^_c+_$/\n\n  minHeight = 3;\n  minWidth = 7;\n\n  match: (region)->\n    pairs = []\n    for y in [0 .. region.height - minHeight]\n      row = region.getRow(y)\n      headerRegexp.lastIndex = 0\n\n      # TODO: Don't collide each other\n      while (m = headerRegexp.exec(row)) and (m[0].length % 2) == 1\n        subregion = region.getSubregion m[0].length, region.height - y, m.index, y\n        pair = @submatch(subregion)\n        pairs.push(pair) if pair\n        headerRegexp.lastIndex = m.index + 1\n               \n    pairs\n\n  submatch: (region)->\n    patWidth = (region.width - 5) / 2\n    for y in [1 ... region.height]\n      row = region.getRow(y)\n      m = bodyRegexp.exec(row)\n      break unless m and m[0].charAt(patWidth + 2) == 'c'\n\n    # getRow(y) is OOB or doesn't match bodyRegexp, which implies neither for tailRegexp\n    return null unless y >= 3 and tailRegexp.exec(region.getRow(y - 1))\n\n    patHeight = y - 2    \n    pattern = Pattern.fromRegion(region.getSubregion patWidth, patHeight, 2, 1)\n    after = region.getSubregion patWidth, patHeight, 3 + patWidth, 1\n\n    new Pair(pattern, after)\n","module.exports = class Router extends Backbone.Router\n  routes:\n    'pattern/:pattern': 'homeWithPattern'\n    'comp/:compressed': 'homeWithComp'\n    '': 'home'\n\n  home: ->\n    $('body').html application.homeView.render().el\n\n  homeWithPattern: (pattern)->\n    application.world.initWith pattern\n    $('body').html application.homeView.render().el\n\n  homeWithComp: (compressed)->\n    application.world.initWithCompressed compressed\n    $('body').html application.homeView.render().el\n","Region = require 'models/region'\n\nmodule.exports = class TargetParser\n\n  headerRegexp = /c__+_c/g\n  header1Regexp = /^_cc+c_$/\n  bodyRegexp = /^_c.+c_$/\n  tail0Regexp = header1Regexp\n  tail1Regexp = /^c__+_c$/\n\n  minHeight = 5;\n  minWidth = 5;\n\n  match: (region)->\n    for y in [0 .. region.height - minHeight]\n      row = region.getRow(y)\n      headerRegexp.lastIndex = 0\n      while (m = headerRegexp.exec(row))\n        subregion = region.getSubregion m[0].length, region.height - y, m.index, y\n        targetRegion = @submatch subregion\n        return targetRegion if targetRegion\n\n        # Pattern must not be exclusive\n        headerRegexp.lastIndex = m.index + 1\n    null\n\n  submatch: (region)->\n    return false unless header1Regexp.exec(region.getRow(1))\n\n    y = 2\n    while y < region.height - 1 and bodyRegexp.exec(region.getRow(y))\n      y = y + 1\n    # It's tricky but the bottom border matches bodyRegexp, too.\n    if tail0Regexp.exec(region.getRow(y - 1)) and tail1Regexp.exec(region.getRow(y))\n      return region.getSubregion region.width - 4, y - 3, 2, 2\n    null     \n    \n","# Put your handlebars.js helpers here.\n","# Base class for all collections.\nmodule.exports = class Collection extends Backbone.Collection\n","assert = require 'lib/assert'\nModel = require 'models/model'\n\n# A objects contains matching information\n# Visulan finds all matches for all pairs then rewrites them.\n# This class keeps information which will be utilized in rewrite phase.\n\nmodule.exports = class MatchResult extends Model\n  #  to match and destnation region\n  # TODO: keep the information for Declaration\n  initialize: (@dest, @replace)->\n    assert @dest.width == @replace.width\n    assert @dest.height == @replace.height\n\n  # execute replacemente\n  execute: ()->\n    @dest.replaceWith @replace\n","# Base class for all models.\nmodule.exports = class Model extends Backbone.Model\n","assert = require 'lib/assert'\nModel = require 'models/model'\nRegion = require 'models/region'\nPattern = require 'models/pattern'\nMatchResult = require 'models/match-result'\n\nmodule.exports = class Pair extends Model\n  initialize: (@pattern, @after) ->\n    assert @pattern instanceof Pattern\n    assert @after instanceof Region\n\n  # Returns MatchResult.\n  # Do not substibutate here\n  match: (region, matchedRegions)->\n    dests = @pattern.match region, matchedRegions\n    (new MatchResult(dest, @after) for dest in dests)\n","assert = require 'lib/assert'\nModel = require 'models/model'\n\n# TODO: supprot declaration.\n\nmodule.exports = class Pattern extends Model\n  initialize: (linePatterns) ->\n    @regExps = (new RegExp (\"^\" + pat) for pat in linePatterns)\n    @topRe = new RegExp linePatterns[0], \"g\"\n    @width = linePatterns[0].length  # TODO: consider declaration\n  \n  @fromRegion: (region)->\n    new Pattern (region.getRow(y) for y in [0...region.height])\n\n  getHeight: ->\n    @regExps.length\n\n  getWidth: ->\n    @width    \n\n  # Try to match\n  # Returns array of matched subregions\n  # subregions must not intersect with each other and given matchedRegions\n  match: (targetRegion, matchedRegions)->\n    subregions = []\n    matchedRegions = [] unless matchedRegions\n    for y in [0 .. targetRegion.height - @getHeight()]\n      row = targetRegion.getRow(y)\n      @topRe.lastIndex = 0\n      while (m = @topRe.exec(row))\n        # TODO: optimize collision check\n        subregion = targetRegion.getSubregion @getWidth(), @getHeight(), m.index, y\n        if (_.every matchedRegions, (r)=>not r.intersect subregion) and\n              @submatch(subregion)\n          subregions.push(subregion)\n        else\n          # Pattern must not be exclusive\n          @topRe.lastIndex = m.index + 1\n\n    subregions\n\n  submatch: (region)->\n    assert region.height == @getHeight()\n    for y in [1 ... region.height]\n      return false unless @regExps[y].exec(region.getRow(y))\n    return true\n","Model = require 'models/model'\n\nmodule.exports = class Region extends Model\n  initialize: (@world, {@width, @height, @left, @top}) ->\n\n  getRow: (y)->\n    @world.board[@top + y].slice(@left, @left + @width)\n\n  getSubregion: (width, height, left, top)->\n    # TODO: sanity check\n    new Region @world,\n      width: width\n      height: height\n      left: @left + left\n      top: @top + top\n\n  # Replace with other reigion\n  # The width and height should be same\n  replaceWith: (region)->\n    if region.width != @width or region.height != @height\n      console \"replaceWith: not match: \" + region.width + \"x\" + region.height\n      return\n    if @top <= region.top\n      y = 0\n      end = @height\n      step = 1\n    else\n      y = @height - 1\n      end = -1\n      step = -1\n    # No need to worry about horizontal overlap\n    while y != end\n      row = @world.board[@top + y]\n      oRow = region.getRow(y)\n      row = row.slice(0, @left) + oRow + row.slice(@left + @width)\n      @world.board[@top + y] = row\n      y = y + step\n\n  # clone to new region. Its world will be recreated\n  clone: ()->\n        \n  right: ->\n    @left + @width\n\n  bottom: ->\n    @top + @height\n\n  # create new region from intetersecion with another\n  # another region must share world.\n  intersect: (region)->\n    return null if @world != region.world\n      \n    newTop = Math.max(@top, region.top)\n    newLeft = Math.max(@left, region.left)\n    newBottom = Math.min(@bottom(), region.bottom())\n    newRight = Math.min(@right(), region.right())\n    if newTop < newBottom and newLeft < newRight\n      @world.getRegion(newRight - newLeft, newBottom - newTop, newLeft, newTop)\n    else\n      null\n","Model = require 'models/model'\nRegion = require 'models/region'\n\nassert = require 'lib/assert'\n\nmodule.exports = class World extends Model\n  initialize: ({@width, @height}) ->\n    row = new Array(@width + 1).join('_')\n    @board = (row for i in [0 ... @height])\n\n  initWith: (pattern)->\n    for y in [0 ... @height]\n      row = pattern.slice(y * @width, (y + 1) * @width)\n      row = row + @board[y].slice(row.length)\n      @board[y] = row\n\n  initWithCompressed: (data)->\n    base64 = data.replace(/\\-/g,'+').replace(/\\_/g,'/')\n    @initWith LZString.decompressFromBase64(base64)\n\n  fixInSanity: ->\n    # Hopefully its sanity must not be lost. But in real...\n    emptyRow = new Array(@width + 1).join('_')\n\n    for y in [0...@height]\n      row = @board[y]\n      if row.length < @width\n        @board[y] += emptyRow.slice(row.length)\n      else if row.length > @width\n        @board[y] = row.slice(0, @width)\n\n    assert @checkSanity()\n \n  getData: ->\n    @fixInSanity()\n    @board.join('') \n\n  getCompressedData: ->\n    raw = @getData()\n    base64 = LZString.compressToBase64(raw)\n    base64.replace(/\\+/g,'-').replace(/\\//g,'_')\n\n  getSym: (x, y)->\n    @board[y].charAt(x)\n\n  setSym: (x, y, sym)->\n    row = @board[y]\n    @board[y] = row.slice(0, x) + sym + row.slice(x + 1)\n\n  getRegion: (width, height, left, top) ->\n    new Region(@, {width: width, height: height, left: left, top: top})\n\n  getWholeRegion: ()->\n    @getRegion(@width, @height, 0, 0)\n\n  checkSanity: ()->\n    @board.length == @height and _.every @board, (row)=> row.length == @width \n\n  \n  \n","World = require 'models/world'\nPattern = require 'models/pattern'\nPair = require 'models/pair'\n\nView = require 'views/view'\nWorldView = require 'views/world-view'\nPalletView = require 'views/pallet-view'\ntemplate = require 'views/templates/home'\n\nmodule.exports = class HomeView extends View\n  id: 'home-view'\n  template: template\n\n  events:\n    \"click #js_play\": \"play\"\n    \"click #js_pause\": \"pause\"\n    \"click #js_link\": \"showLink\"\n    \"click #js_select\": \"selectMdoe\"\n    \"click #js_paste\": \"pasteMode\"\n\n  initialize: ({@world})->\n    super\n    @worldView = new WorldView model: @world\n    @palletView = new PalletView\n    @palletView.setColor('z')\n\n    @wholeRegion = @world.getWholeRegion()\n\n    @isPlaying = false\n  \n  render: ->\n    super\n    @$('#js-pallet-container').html @palletView.render().el\n    @$('#js-visulan-slot').html @worldView.render().el\n    @palletView.on 'pickColor', @pickColor\n\n    @setIsPlaying @isPlaying\n\n    @on \"playingState\", @setIsPlaying\n\n    @\n\n  setIsPlaying: (v) ->\n    @isPlaying = v\n    @$('#js_play').prop('disabled', v)\n    @$('#js_pause').prop('disabled', not v)\n\n  play: ->\n    @trigger('play')\n\n  pause: ->\n    @trigger('pause')\n    \n  showLink: ->\n    link = location.protocol + \"//\"\n    link += location.host or \"\"\n    link += location.pathname or \"\"\n    link += '#comp/' + @world.getCompressedData()\n\n    @$('#js-link-text').toggle()\n    @$('#js-link-text').text(link)\n\n  pickColor: (sym) =>\n    console.log sym\n    @worldView.setPenColor(sym)\n    @worldView.setModeEdit()\n    @$('.js-world-view-mode').removeClass('active')\n    @palletView.setColor(sym)\n\n  selectMdoe: ->\n    @worldView.setModeSelect()\n    @$('.js-world-view-mode').removeClass('active')\n    @palletView.setColor(null)\n    @$('#js_select').addClass('active')\n\n  pasteMode: ()->\n    @worldView.setModePaste()\n    @$('.js-world-view-mode').removeClass('active')\n    @palletView.setColor(null)\n    @$('#js_paste').addClass('active')\n","View = require 'views/view'\nColor = require 'lib/color'\n\nmodule.exports = class PalletView extends View\n  id: 'js-pallet-view'\n  tagName: 'canvas'\n\n  events:\n    'click' : 'choose'\n\n  multi = 12 # with small number, dots blur. I don't know why.\n  margin = 2\n\n  render: ->\n    super\n    @el.height = 1 * multi + 2 * margin\n    @el.width = multi * Color.symbols.length\n    @canvasCtx = @el.getContext('2d')\n    \n    @draw()\n    @\n\n  draw: ->\n   return unless @canvasCtx\n   @canvasCtx.fillStyle = 'black'\n   @canvasCtx.fillRect 0, 0, @el.width, @el.height\n   if (typeof @colorIx) is \"number\"\n     @canvasCtx.fillStyle = 'pink'\n     @canvasCtx.fillRect @colorIx * multi, 0, multi, @el.height\n\n   for x in [0 ... Color.symbols.length]\n     @canvasCtx.fillStyle = Color.toColor(Color.symbols.charAt(x))\n     @canvasCtx.fillRect x * multi, margin, multi, multi\n  \n  choose: (event)->\n    x = (event.offsetX / multi) | 0\n    @trigger \"pickColor\", Color.symbols.charAt(x)\n\n  setColor: (sym)->\n    if sym\n      @colorIx = Color.symbols.indexOf(sym)\n    else\n      @colorIx = null\n    @draw()\n","<div id=\"content\">\n<div>\n<button id=\"js_play\">Play</button>\n<button id=\"js_pause\">Pause</button>\n<button id=\"js_select\" class='js-world-view-mode'>Select</button>\n<button id=\"js_paste\" class='js-world-view-mode'>Paste</button>\n<span id=\"js-pallet-container\"></span>\n<button id=\"js_link\">Link</button>\n</div>\n<div id=\"js-link-text\" />\n<div id=\"js-visulan-slot\" />\n</div>\n<address>dagezi@gmail.com</address> or <a href=\"http://twitter.com/dagezi/\">@dagezi</a>\n\n","require 'lib/view_helper'\n\n# Base class for all views.\nmodule.exports = class View extends Backbone.View\n  template: ->\n    return\n\n  getRenderData: ->\n    return\n\n  render: =>\n    # console.debug \"Rendering #{@constructor.name}\"\n    @$el.html @template @getRenderData()\n    @afterRender()\n    this\n\n  afterRender: ->\n    return\n","Color = require 'lib/color'\nView = require './view'\n\nmodule.exports = class WorldView extends View\n  id: 'js-world-view'\n  tagName: 'canvas'\n\n  initialize: ({@model}) ->\n    super\n    @penColor = 'z'\n    @mode = 'edit'  # edit/select/paste\n    @selectionPivot = null\n    @selectionOther = null\n\n  events:\n    \"mousedown\": \"mouseDown\"\n    \"mousemove\": \"mouseMove\"\n    \"mouseup\": \"mouseUp\"\n    # TODO: Support touch events\n\n  render: ->\n    super\n    @multi = 8 # with small number, dots blur. I don't know why.\n    @el.height = @model.height * @multi\n    @el.width = @model.width * @multi\n    @canvasCtx = @el.getContext('2d')\n    @draw()\n    @\n\n  draw: ->\n    for y in [0 ... @model.height]\n      for x in [0 ... @model.width]\n        sym = @model.getSym(x, y)\n        @canvasCtx.fillStyle = Color.toColor(sym)\n        @canvasCtx.fillRect x * @multi, y * @multi, (x + 1) * @multi, (y + 1) * @multi\n\n    if @selectionPivot and @selectionOther\n      region = @getRegion(@selectionPivot, @selectionOther)\n\n      @canvasCtx.strokeStyle = 'rgb(200,200,200)'\n      @canvasCtx.strokeRect(region.left * @multi, region.top * @multi,\n        region.width * @multi - 1, region.height * @multi - 1)\n\n  getRegion: (p0, p1)->\n    left = Math.min(@selectionPivot[0], @selectionOther[0])\n    right = Math.max(@selectionPivot[0], @selectionOther[0])\n    top = Math.min(@selectionPivot[1], @selectionOther[1])\n    bottom = Math.max(@selectionPivot[1], @selectionOther[1])\n    width = right - left + 1\n    height = bottom - top + 1\n\n    @model.getRegion(width, height, left, top)\n    \n  putPixel: (x, y, sym)->\n    @model.setSym x, y, sym\n    @draw()\n\n  setPenColor: (sym)->\n    @penColor = sym\n\n  setModeEdit: ()->\n    @mode = 'edit'\n\n  setModeSelect: ()->\n    @mode = 'select'\n\n  setModePaste: ()->\n    @mode = 'paste'\n\n  selectionStart: (x, y)->\n    @selectionPivot = @selectionOther = [x, y]\n    @draw()\n\n  selectionChange: (x, y)->\n    @selectionOther = [x, y]\n    @draw()\n\n  paste: (x, y)->\n    # TODO: consider tha case x, y in nearby bottom/right side\n    sourceRegion = @getRegion(@selectionPivot, @selectionOther)\n    destRegion = @model.getRegion(sourceRegion.width, sourceRegion.height, x, y)\n    destRegion.replaceWith sourceRegion\n    @draw()\n\n  getCoordFromMouseEvent: (e)->\n    if not e.offsetX is undefined\n      x = e.offsetX\n    else\n      x = e.clientX - $(e.target).offset().left\n\n    y = if not e.offsetY is undefined\n          e.offsetY\n        else\n          e.clientY - $(e.target).offset().top\n\n    [(x / @multi) | 0, (y / @multi) | 0]\n\n\n  isButtonDown: (event)->\n    if event.buttons == undefined\n      event.which is 1\n    else\n      event.buttons is 1\n\n  mouseDown: (event)->\n    return unless @isButtonDown(event)\n    [x, y] = @getCoordFromMouseEvent(event)\n    switch @mode\n      when 'edit'\n        @putPixel x, y, @penColor\n      when 'select'\n        @selectionStart x, y\n      when 'paste'\n         @paintPivot = [x, y]\n        \n  mouseMove: (event)->\n    return unless @isButtonDown(event)\n    [x, y] = @getCoordFromMouseEvent(event)\n    switch @mode\n      when 'edit'\n        @putPixel x, y, @penColor\n      when 'select'\n        @selectionChange x, y\n\n  mouseUp: (event)->\n    [x, y] = @getCoordFromMouseEvent(event)\n    if @mode == 'paste' and x == @paintPivot[0] and y == @paintPivot[1]\n      @paste x, y\n      \n"]}