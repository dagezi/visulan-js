{"version":3,"file":"public/test/javascripts/test.js","sources":["test/initialize.coffee","test/lib/assert-test.coffee","test/lib/pair-parser-test.coffee","test/lib/target-parser-test.coffee","test/models/pair-test.coffee","test/models/pattern-test.coffee","test/models/region-test.coffee","test/models/world-test.coffee"],"names":[],"mappings":"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","sourcesContent":["tests = [\n  './models/world-test'\n  './models/region-test'\n  './models/pattern-test'\n  './models/pair-test'\n  './lib/assert-test'\n  './lib/target-parser-test'\n  './lib/pair-parser-test'\n]\n\nfor test in tests\n  require test\n","assert = require 'lib/assert'\n\ndescribe 'assert', ->\n it 'should throw error on fail', ->\n   expect(=> assert 1 == 0).to.throwException()\n\n it 'should not throw error on success', ->\n   assert 1 == 1\n\n","World = require 'models/world'\nRegion = require 'models/region'\nPairParser = require 'lib/pair-parser'\n\ndescribe 'PairParser', ->\n  beforeEach ->\n    @pairParser = new PairParser()\n\n  it 'should not find any pair', ->\n    world = new World width: 10, height: 10\n    region = world.getWholeRegion()\n    expect(@pairParser.match(region)).to.have.length 0\n\n  it 'should not find any pair for one line', ->\n    world = new World width: 10, height: 10\n    world.initWith '__ccccccc_'\n    region = world.getWholeRegion()\n    expect(@pairParser.match(region)).to.have.length 0\n\n  it 'should find minimum pair', ->\n    world = new World width: 7, height: 3\n    data = '_ccccc_/_cdcsc_/_ccccc_'\n    data = data.replace(/\\//g, '')\n    world.initWith data\n    region = world.getWholeRegion()\n    pairs = @pairParser.match(region) \n    expect(pairs).to.have.length 1\n    pair = pairs[0]\n    expect(pair.after.width).to.be 1\n    expect(pair.after.height).to.be 1\n    expect(pair.after.top).to.be 1\n    expect(pair.after.left).to.be 4\n\n  it 'should find pair', ->\n    world = new World width: 9, height: 6\n    data = '_ccccccc_/_cadcdsc_/_cadcccc_/_ccccdsc_/_cadcdsc_/_ccccccc_'\n    data = data.replace(/\\//g, '')\n    world.initWith data\n    region = world.getWholeRegion()\n    pairs = @pairParser.match(region) \n    expect(pairs).to.have.length 1\n    pair = pairs[0]\n    expect(pair.after.width).to.be 2\n    expect(pair.after.height).to.be 4\n    expect(pair.after.top).to.be 1\n    expect(pair.after.left).to.be 5\n\n  it 'should find pair even there are margin', ->\n    world = new World width: 11, height: 8\n    data = 'xx_ccccccc_/yz_cadcdsc_/_c_cadcccc_/dd_ccccdsc_/km_cadcdsc_/ll_ccccccc_'\n    data = data.replace(/\\//g, '')\n    world.initWith data\n    region = world.getWholeRegion()\n    pairs = @pairParser.match(region) \n    expect(pairs).to.have.length 1\n    pair = pairs[0]\n    expect(pair.after.width).to.be 2\n    expect(pair.after.height).to.be 4\n    expect(pair.after.top).to.be 1\n    expect(pair.after.left).to.be 7\n\n  it 'should find two pairs', ->\n    world = new World width: 13, height: 4\n    data = '_ccccc_ccccc_/_cacbc_cbcdc_/_cacbc_cbcdc_/_ccccc_ccccc_'\n    data = data.replace(/\\//g, '')\n    world.initWith data\n    region = world.getWholeRegion()\n    pairs = @pairParser.match(region) \n    expect(pairs).to.have.length 2\n    pair = pairs[0]\n    expect(pair.after.width).to.be 1\n    expect(pair.after.height).to.be 2\n","World = require 'models/world'\nRegion = require 'models/region'\nTargetParser = require 'lib/target-parser'\n\ndescribe 'TargetParser', ->\n  beforeEach ->\n    @targetParser = new TargetParser()\n\n  it 'should not find false target', ->\n    world = new World width: 10, height: 10\n    region = world.getWholeRegion()\n    expect(@targetParser.match(region)).to.be null\n\n  it 'should find target', ->\n    world = new World width: 8, height: 6\n    data = 'c______c/_cccccc_/_cabdcc_/_cabdcc_/_cccccc_/c______c/'\n    data = data.replace(/\\//g, '')\n    world.initWith data\n    region = world.getWholeRegion()\n    targetRegion = @targetParser.match(region)\n    expect(targetRegion).not.to.be null\n    expect(targetRegion.width).to.be 4\n    expect(targetRegion.height).to.be 2\n    expect(targetRegion.top).to.be 2\n    expect(targetRegion.left).to.be 2\n\n\n  it 'should find target', ->\n    world = new World width: 10, height: 10\n    data = 'c__ckdc__c/ac______cz/d_cccccc_k/l_cabdcc_b/p_cabdcc_c/c_cccccc_d/ec______cf/'\n    data = data.replace(/\\//g, '')\n    world.initWith data\n    region = world.getWholeRegion()\n    targetRegion = @targetParser.match(region)\n    expect(targetRegion.width).to.be 4\n    expect(targetRegion.height).to.be 2\n    expect(targetRegion.top).to.be 3\n    expect(targetRegion.left).to.be 3\n","World = require 'models/world'\nPattern = require 'models/pattern'\nPair = require 'models/pair'\nMatchResult = require 'models/match-result'\n\ndescribe 'Pair', ->\n  beforeEach ->\n    pattern = new Pattern ['a ']\n    afterWorld = new World height: 2, width: 2\n    afterWorld.initWith ' c a'\n    afterRegion = afterWorld.getRegion 2, 1, 0, 0\n    \n    @pair = new Pair pattern, afterRegion\n\n  describe '#match', ->\n    it 'should return enough data to replace', ->\n      world = new World height: 2, width: 4\n      world.initWith ('a a ' + 'a  b')\n      region = world.getWholeRegion()\n\n      matches = @pair.match(region)\n      expect(matches).to.have.length 3\n      expect(matches[0]).to.be.a MatchResult\n\n      match.execute() for match in matches\n\n      expect(region.getRow(0)).to.be ' c c'\n      expect(region.getRow(1)).to.be ' c b'\n\n    it 'should avoid collision with trivial exsiting matches', ->\n      world = new World height: 2, width: 4\n      world.initWith ('a a ' + 'a  b')\n      region = world.getWholeRegion()\n      matchedRegions = [region]\n\n      expect(@pair.match region, matchedRegions).to.have.length 0\n\n\n    it 'should avoid collision with exsiting matches', ->\n      world = new World height: 2, width: 4\n      world.initWith ('a a ' + 'a  b')\n      region = world.getWholeRegion()\n      matchedRegions = [\n        world.getRegion(2, 1, 0, 1),\n        world.getRegion(1, 2, 3, 0)]\n            \n      matches = @pair.match region, matchedRegions\n      expect(matches).to.have.length 1\n\n      match.execute() for match in matches\n\n      expect(region.getRow(0)).to.be ' ca '\n      expect(region.getRow(1)).to.be 'a  b'\n","World = require 'models/world'\nPattern = require 'models/pattern'\n\ndescribe 'Pattern', ->\n  beforeEach ->\n    @pattern = new Pattern [\"aaa\", \"aaa\", \"bbb\"]\n    @simplePattern = new Pattern [\"_\"]\n\n  describe '#initialize', ->\n    it 'should generate expected height and width', ->\n      expect(@pattern.getHeight()).to.be 3\n      expect(@pattern.getWidth()).to.be 3\n\n  describe '#match', ->\n    it 'should match', ->\n      world = new World height: 3, width: 3\n      world.initWith \"aaaaaabbb\"\n      region = world.getWholeRegion()\n      regions = @pattern.match(region)\n      expect(regions).to.have.length(1)\n      expect(regions[0].top).to.be 0\n      expect(regions[0].left).to.be 0\n      expect(regions[0].width).to.be 3\n      expect(regions[0].height).to.be 3\n\n    it 'should not match', ->\n      world = new World height: 3, width: 3\n      world.initWith \"aaaaaabbc\"\n      region = world.getWholeRegion()\n      regions = @pattern.match(region)\n      expect(regions).to.have.length(0)\n\n    it 'should match with backtrack', ->\n      world = new World height: 3, width: 4\n      world.initWith \"aaaa\" + \"aaaa\" + \"abbb\"\n      region = world.getWholeRegion()\n      regions = @pattern.match(region)\n      expect(regions).to.have.length(1)\n      expect(regions[0].left).to.be 1\n\n    it 'subregions should not collide each other, but...', ->\n      pattern = new Pattern [\"aaa\", \"aaa\"]\n      world = new World height: 3, width: 3\n      world.initWith \"aaa\" + \"aaa\" + \"aaa\"\n      region = world.getWholeRegion()\n      regions = pattern.match(region)\n\n      # TODO: fix this!\n      expect(regions).to.have.length(2)  # should 1!\n\n    it 'should not match outside of region horizontally', ->\n      world = new World height: 3, width: 4\n      world.initWith \"aaaa\" + \"aaaa\" + \"abbb\"\n      region = world.getRegion(3, 3, 0, 0)\n      expect(@pattern.match(region)).to.have.length 0\n\n    it 'should not match outside of region vertically', ->\n      world = new World height: 4, width: 4\n      world.initWith \"____\" + \"aaaa\" + \"aaaa\" + \"abbb\"\n      region = world.getRegion(4, 3, 0, 0)\n      expect(@pattern.match(region)).to.have.length 0\n\n    it 'should not collide with other matches', ->\n      world = new World height: 4, width: 4\n      region = world.getRegion(4, 4, 0, 0)\n      matchedRegions = [region]\n      expect(@simplePattern.match(region, matchedRegions)).to.have.length 0\n\n    it 'should match avoiding other matches', ->\n      world = new World height: 4, width: 4\n      region = world.getRegion(4, 4, 0, 0)\n      matchedRegions = []\n      matchedRegions.push world.getRegion(3, 4, 0, 0)\n      matchedRegions.push world.getRegion(1, 2, 3, 1)\n      matches = @simplePattern.match(region, matchedRegions)\n      expect(matches).to.have.length 2\n      expect(matches[0].width).to.be 1\n      expect(matches[0].left).to.be 3\n      expect(matches[1].width).to.be 1\n      expect(matches[1].left).to.be 3\n\n","World = require 'models/world'\nRegion = require 'models/region'\n\ndescribe 'Region', ->\n  beforeEach ->\n    @world = new World width: 5, height: 10\n\n  describe '#getWholeRegion', ->\n    it 'should have orignal size', ->\n      region = @world.getWholeRegion()\n      expect(region.width).to.be @world.width\n      expect(region.height).to.be @world.height\n\n  describe '#getRow', ->\n    it 'should correct row', ->\n      region = @world.getRegion(5, 5, 0, 0)\n      @world.setSym(1, 1, 'a')\n      expect(region.getRow(0)).to.be '_____'\n      expect(region.getRow(1)).to.be '_a___'\n\n  describe '#replaceWith', ->\n    it 'should copy', ->\n      src = @world.getRegion(5, 4, 0, 0)\n      dest = @world.getRegion(5, 4, 0, 5)\n      @world.setSym(1, 1, 'a')\n      @world.setSym(2, 4, 'b')\n      dest.replaceWith(src)\n      expect(@world.checkSanity()).to.be true\n      expect(@world.getSym(1, 6)).to.be('a')\n      expect(@world.getSym(2, 9)).to.be('_')\n      expect(src.getRow(1)).to.be(dest.getRow(1))\n\n    it 'should copy correctly to overlapped region above', ->\n      src = @world.getRegion(5, 5, 0, 1)\n      dest = @world.getRegion(5, 5, 0, 0)\n      @world.setSym(4, 0, 'z')\n      @world.setSym(1, 1, 'a')\n      @world.setSym(2, 5, 'b')\n      dest.replaceWith(src)\n      expect(@world.checkSanity()).to.be true\n      expect(@world.getSym(4, 0)).to.be('_')\n      expect(@world.getSym(1, 0)).to.be('a')\n      expect(@world.getSym(2, 4)).to.be('b')\n\n    it 'should copy correctly to overlapped region below', ->\n      src = @world.getRegion(5, 5, 0, 0)\n      dest = @world.getRegion(5, 5, 0, 1)\n      @world.setSym(1, 0, 'a')\n      @world.setSym(2, 4, 'b')\n      @world.setSym(3, 5, 'c')\n      dest.replaceWith(src)\n      expect(@world.checkSanity()).to.be true\n      expect(@world.getSym(1, 1)).to.be('a')\n      expect(@world.getSym(2, 5)).to.be('b')\n      expect(@world.getSym(3, 5)).to.be('_')\n      expect(@world.getSym(3, 6)).to.be('_')\n\n  describe '#intersect', ->\n    it 'should calculate right intersection', ->\n      region0 = @world.getRegion(5, 5, 0, 0)\n      region1 = @world.getRegion(4, 5, 1, 3)\n      intersection = region0.intersect region1\n      expect(intersection.width).to.be 4\n      expect(intersection.height).to.be 2\n\n      # it's commutive\n      intersection = region1.intersect region0\n      expect(intersection.width).to.be 4\n      expect(intersection.height).to.be 2\n\n    it 'should return 1x1 region ', ->\n      region0 = @world.getRegion(1, 2, 3, 0)\n      region1 = @world.getRegion(1, 2, 3, 1)\n      intersection = region0.intersect region1\n      expect(intersection.width).to.be 1\n      expect(intersection.height).to.be 1\n\n      # it's commutive\n      intersection = region1.intersect region0\n      expect(intersection.width).to.be 1\n      expect(intersection.height).to.be 1\n\n\n    it 'should return null', ->\n      region0 = @world.getRegion(5, 5, 0, 0)\n      region1 = @world.getRegion(5, 5, 0, 5)\n      expect(region0.intersect region1).to.be null\n      expect(region1.intersect region0).to.be null\n\n","World = require 'models/world'\nRegion = require 'models/region'\n\ndescribe 'World', ->\n  beforeEach ->\n    @world = new World width: 5, height: 10\n  \n  describe 'just after created', ->\n    it 'has specified height', ->\n      expect(@world.board.length).to.be 10\n      expect(@world.board[0].length).to.be 5\n      expect(@world.checkSanity()).to.be true\n\n  describe '#initWith', ->\n    beforeEach ->\n      @world.initWith '_abcd_zzzz_j'\n\n    it 'has init with given pattern', ->\n      expect(@world.getSym(0, 0)).to.be '_'\n      expect(@world.getSym(1, 0)).to.be 'a'\n      expect(@world.getSym(4, 0)).to.be 'd'\n      expect(@world.getSym(1, 1)).to.be 'z'\n      expect(@world.getSym(4, 1)).to.be 'z'\n      expect(@world.getSym(1, 2)).to.be 'j'\n      expect(@world.getSym(2, 2)).to.be '_'\n      expect(@world.getSym(0, 3)).to.be '_'\n\n  describe '#setSym', ->\n    it 'should change cell', ->\n      @world.setSym 0, 0, 'z'\n      expect(@world.getSym(0, 0)).to.be 'z'\n      expect(@world.checkSanity()).to.be true\n\n  describe '#getWholeRegion', ->\n    it 'should create region with same size', ->\n      region = @world.getWholeRegion()\n      expect(region).to.be.a(Region)\n      expect(region.height).to.be @world.height\n      expect(region.width).to.be @world.width\n\n  describe '#getData', ->\n    it 'should return the data used for initWith', ->\n      data = 'adpbcdefgdafdsaafpkafafdsasdlfdsc'\n      data += new Array(50 - data.length + 1).join('_')\n      @world.initWith data\n      expect(@world.getData()).to.be data\n\n  describe '#initWithCompressed and #getCompressedData', ->\n    it 'should return the data used for initWith', ->\n      data = 'adpbcdefgdafdsaafpkafafdsasdlfdsc'\n      data += new Array(50 - data.length + 1).join('_')\n      @world.initWith data\n\n      compressed = @world.getCompressedData()\n      expect(compressed.length).to.be.lessThan data.length\n      console.log compressed\n\n      newWorld = new World width: 5, height: 10\n      newWorld.initWithCompressed compressed\n      expect(newWorld.getData()).to.be data\n"]}